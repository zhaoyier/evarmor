// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evarmor/common.proto

package evarmor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "strings"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = strings.TrimPrefix

type _ExchangeNameEnum struct {
	Unknown   ExchangeName
	ZhengZhou ExchangeName
	Dalian    ExchangeName
	ShangHai  ExchangeName
	Billboard ExchangeName
	Hint      ExchangeName
	TotalSize int
	List      []ExchangeName
	ZeroList  []ExchangeName
}

var ExchangeNameEnum = _ExchangeNameEnum{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	[]ExchangeName{
		ExchangeName_ExchangeNameZhengZhou,
		ExchangeName_ExchangeNameDalian,
		ExchangeName_ExchangeNameShangHai,
		ExchangeName_ExchangeNameBillboard,
		ExchangeName_ExchangeNameHint,
	},
	[]ExchangeName{
		ExchangeName_ExchangeNameUnknown,
		ExchangeName_ExchangeNameZhengZhou,
		ExchangeName_ExchangeNameDalian,
		ExchangeName_ExchangeNameShangHai,
		ExchangeName_ExchangeNameBillboard,
		ExchangeName_ExchangeNameHint,
	},
}

func (x *_ExchangeNameEnum) Parse(short string) ExchangeName {
	return ExchangeName(ExchangeName_value["ExchangeName"+strings.TrimPrefix(short, "ExchangeName")])
}

func (x ExchangeName) IsUnknown() bool {
	return x == ExchangeNameEnum.Unknown
}

func (x ExchangeName) GetUnknown() ExchangeName {
	return ExchangeNameEnum.Unknown
}

func (x ExchangeName) IsZhengZhou() bool {
	return x == ExchangeNameEnum.ZhengZhou
}

func (x ExchangeName) GetZhengZhou() ExchangeName {
	return ExchangeNameEnum.ZhengZhou
}

func (x ExchangeName) IsDalian() bool {
	return x == ExchangeNameEnum.Dalian
}

func (x ExchangeName) GetDalian() ExchangeName {
	return ExchangeNameEnum.Dalian
}

func (x ExchangeName) IsShangHai() bool {
	return x == ExchangeNameEnum.ShangHai
}

func (x ExchangeName) GetShangHai() ExchangeName {
	return ExchangeNameEnum.ShangHai
}

func (x ExchangeName) IsBillboard() bool {
	return x == ExchangeNameEnum.Billboard
}

func (x ExchangeName) GetBillboard() ExchangeName {
	return ExchangeNameEnum.Billboard
}

func (x ExchangeName) IsHint() bool {
	return x == ExchangeNameEnum.Hint
}

func (x ExchangeName) GetHint() ExchangeName {
	return ExchangeNameEnum.Hint
}

func (x ExchangeName) Valid() bool {
	if x == ExchangeName_ExchangeNameUnknown {
		return false
	}
	return x.ZeroValid()
}

func (x ExchangeName) ZeroValid() bool {
	_, ok := ExchangeName_name[int32(x)]
	return ok
}
func (x ExchangeName) Short() string {
	n := x.String()
	typ := "ExchangeName"
	if len(n) > len(typ) {
		if n[:len(typ)] == typ {
			return n[len(typ):]
		}
	}
	return n

}
func (x *ExchangeName) SetValue(v int32) {
	*x = ExchangeName(v)
}

func (x ExchangeName) GetValue() int32 {
	return int32(x)
}

func (x *ExchangeName) Type() string {
	return "ExchangeName"
}

type ExchangeName int32

const (
	ExchangeName_ExchangeNameUnknown   ExchangeName = 0
	ExchangeName_ExchangeNameZhengZhou ExchangeName = 1
	ExchangeName_ExchangeNameDalian    ExchangeName = 2
	ExchangeName_ExchangeNameShangHai  ExchangeName = 3
	ExchangeName_ExchangeNameBillboard ExchangeName = 4
	ExchangeName_ExchangeNameHint      ExchangeName = 5
)

var ExchangeName_name = map[int32]string{
	0: "ExchangeNameUnknown",
	1: "ExchangeNameZhengZhou",
	2: "ExchangeNameDalian",
	3: "ExchangeNameShangHai",
	4: "ExchangeNameBillboard",
	5: "ExchangeNameHint",
}
var ExchangeName_value = map[string]int32{
	"ExchangeNameUnknown":   0,
	"ExchangeNameZhengZhou": 1,
	"ExchangeNameDalian":    2,
	"ExchangeNameShangHai":  3,
	"ExchangeNameBillboard": 4,
	"ExchangeNameHint":      5,
}

func (x ExchangeName) String() string {
	return proto.EnumName(ExchangeName_name, int32(x))
}
func (ExchangeName) EnumDescriptor() ([]byte, []int) { return FileDescriptorEvarmorCommon, []int{0} }

type _FetchStatusEnum struct {
	Unknown   FetchStatus
	Waiting   FetchStatus
	Finish    FetchStatus
	TotalSize int
	List      []FetchStatus
	ZeroList  []FetchStatus
}

var FetchStatusEnum = _FetchStatusEnum{
	0,
	1,
	2,
	3,
	[]FetchStatus{
		FetchStatus_FetchStatusWaiting,
		FetchStatus_FetchStatusFinish,
	},
	[]FetchStatus{
		FetchStatus_FetchStatusUnknown,
		FetchStatus_FetchStatusWaiting,
		FetchStatus_FetchStatusFinish,
	},
}

func (x *_FetchStatusEnum) Parse(short string) FetchStatus {
	return FetchStatus(FetchStatus_value["FetchStatus"+strings.TrimPrefix(short, "FetchStatus")])
}

func (x FetchStatus) IsUnknown() bool {
	return x == FetchStatusEnum.Unknown
}

func (x FetchStatus) BitHasUnknown() bool {
	return x.BitHas(FetchStatusEnum.Unknown)
}

func (x FetchStatus) BitOrUnknown() FetchStatus {
	x.BitOr(FetchStatusEnum.Unknown)
	return x
}

func (x FetchStatus) GetUnknown() FetchStatus {
	return FetchStatusEnum.Unknown
}

func (x FetchStatus) IsWaiting() bool {
	return x == FetchStatusEnum.Waiting
}

func (x FetchStatus) BitHasWaiting() bool {
	return x.BitHas(FetchStatusEnum.Waiting)
}

func (x FetchStatus) BitOrWaiting() FetchStatus {
	x.BitOr(FetchStatusEnum.Waiting)
	return x
}

func (x FetchStatus) GetWaiting() FetchStatus {
	return FetchStatusEnum.Waiting
}

func (x FetchStatus) IsFinish() bool {
	return x == FetchStatusEnum.Finish
}

func (x FetchStatus) BitHasFinish() bool {
	return x.BitHas(FetchStatusEnum.Finish)
}

func (x FetchStatus) BitOrFinish() FetchStatus {
	x.BitOr(FetchStatusEnum.Finish)
	return x
}

func (x FetchStatus) GetFinish() FetchStatus {
	return FetchStatusEnum.Finish
}

func (x FetchStatus) Valid() bool {
	if x == FetchStatus_FetchStatusUnknown {
		return false
	}
	return x.ZeroValid()
}

func (x FetchStatus) ZeroValid() bool {
	_, ok := FetchStatus_name[int32(x)]
	return ok
}
func (x FetchStatus) Short() string {
	n := x.String()
	typ := "FetchStatus"
	if len(n) > len(typ) {
		if n[:len(typ)] == typ {
			return n[len(typ):]
		}
	}
	return n

}
func (x FetchStatus) BitString() []string {
	name := make([]string, 0, len(FetchStatusEnum.List))
	for _, item := range FetchStatusEnum.List {
		if x.BitHas(item) {
			name = append(name, item.Short())
		}
	}
	return name

}

func (x FetchStatus) BitValid() bool {
	return x.BitHas(FetchStatusEnum.List...)
}
func (x *FetchStatus) BitOr(item FetchStatus) {
	*x |= item
}
func (x FetchStatus) BitHas(xs ...FetchStatus) bool {
	for _, item := range xs {
		if x&item > 0 {
			return true
		}
	}
	return false
}

func (x *FetchStatus) SetValue(v int32) {
	*x = FetchStatus(v)
}

func (x FetchStatus) GetValue() int32 {
	return int32(x)
}

func (x *FetchStatus) Type() string {
	return "FetchStatus"
}

type FetchStatus int32

const (
	FetchStatus_FetchStatusUnknown FetchStatus = 0
	FetchStatus_FetchStatusWaiting FetchStatus = 1
	FetchStatus_FetchStatusFinish  FetchStatus = 2
)

var FetchStatus_name = map[int32]string{
	0: "FetchStatusUnknown",
	1: "FetchStatusWaiting",
	2: "FetchStatusFinish",
}
var FetchStatus_value = map[string]int32{
	"FetchStatusUnknown": 0,
	"FetchStatusWaiting": 1,
	"FetchStatusFinish":  2,
}

func (x FetchStatus) String() string {
	return proto.EnumName(FetchStatus_name, int32(x))
}
func (FetchStatus) EnumDescriptor() ([]byte, []int) { return FileDescriptorEvarmorCommon, []int{1} }

// 报表方式
type _ReportMethodEnum struct {
	Unknown   ReportMethod
	Three     ReportMethod
	Week      ReportMethod
	Month     ReportMethod
	TotalSize int
	List      []ReportMethod
	ZeroList  []ReportMethod
}

var ReportMethodEnum = _ReportMethodEnum{
	0,
	1,
	2,
	3,
	4,
	[]ReportMethod{
		ReportMethod_ReportMethodThree,
		ReportMethod_ReportMethodWeek,
		ReportMethod_ReportMethodMonth,
	},
	[]ReportMethod{
		ReportMethod_ReportMethodUnknown,
		ReportMethod_ReportMethodThree,
		ReportMethod_ReportMethodWeek,
		ReportMethod_ReportMethodMonth,
	},
}

func (x *_ReportMethodEnum) Parse(short string) ReportMethod {
	return ReportMethod(ReportMethod_value["ReportMethod"+strings.TrimPrefix(short, "ReportMethod")])
}

func (x ReportMethod) IsUnknown() bool {
	return x == ReportMethodEnum.Unknown
}

func (x ReportMethod) GetUnknown() ReportMethod {
	return ReportMethodEnum.Unknown
}

func (x ReportMethod) IsThree() bool {
	return x == ReportMethodEnum.Three
}

func (x ReportMethod) GetThree() ReportMethod {
	return ReportMethodEnum.Three
}

func (x ReportMethod) IsWeek() bool {
	return x == ReportMethodEnum.Week
}

func (x ReportMethod) GetWeek() ReportMethod {
	return ReportMethodEnum.Week
}

func (x ReportMethod) IsMonth() bool {
	return x == ReportMethodEnum.Month
}

func (x ReportMethod) GetMonth() ReportMethod {
	return ReportMethodEnum.Month
}

func (x ReportMethod) Valid() bool {
	if x == ReportMethod_ReportMethodUnknown {
		return false
	}
	return x.ZeroValid()
}

func (x ReportMethod) ZeroValid() bool {
	_, ok := ReportMethod_name[int32(x)]
	return ok
}
func (x ReportMethod) Short() string {
	n := x.String()
	typ := "ReportMethod"
	if len(n) > len(typ) {
		if n[:len(typ)] == typ {
			return n[len(typ):]
		}
	}
	return n

}
func (x *ReportMethod) SetValue(v int32) {
	*x = ReportMethod(v)
}

func (x ReportMethod) GetValue() int32 {
	return int32(x)
}

func (x *ReportMethod) Type() string {
	return "ReportMethod"
}

type ReportMethod int32

const (
	ReportMethod_ReportMethodUnknown ReportMethod = 0
	ReportMethod_ReportMethodThree   ReportMethod = 1
	ReportMethod_ReportMethodWeek    ReportMethod = 2
	ReportMethod_ReportMethodMonth   ReportMethod = 3
)

var ReportMethod_name = map[int32]string{
	0: "ReportMethodUnknown",
	1: "ReportMethodThree",
	2: "ReportMethodWeek",
	3: "ReportMethodMonth",
}
var ReportMethod_value = map[string]int32{
	"ReportMethodUnknown": 0,
	"ReportMethodThree":   1,
	"ReportMethodWeek":    2,
	"ReportMethodMonth":   3,
}

func (x ReportMethod) String() string {
	return proto.EnumName(ReportMethod_name, int32(x))
}
func (ReportMethod) EnumDescriptor() ([]byte, []int) { return FileDescriptorEvarmorCommon, []int{2} }

type Result struct {
	//
	ErrCode int32 `protobuf:"varint,1,opt,name=errCode" json:"errCode"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg"`
}

func (m *Result) Validate() error {
	return nil
}
func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return FileDescriptorEvarmorCommon, []int{0} }

func (m *Result) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NameMapping struct {
	//
	Code string `protobuf:"bytes,1,opt,name=code" json:"code"`
	//
	Name string `protobuf:"bytes,2,opt,name=name" json:"name"`
}

func (m *NameMapping) Validate() error {
	return nil
}
func (m *NameMapping) Reset()                    { *m = NameMapping{} }
func (m *NameMapping) String() string            { return proto.CompactTextString(m) }
func (*NameMapping) ProtoMessage()               {}
func (*NameMapping) Descriptor() ([]byte, []int) { return FileDescriptorEvarmorCommon, []int{1} }

func (m *NameMapping) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *NameMapping) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Result)(nil), "evarmor.Result")
	proto.RegisterType((*NameMapping)(nil), "evarmor.NameMapping")
	proto.RegisterEnum("evarmor.ExchangeName", ExchangeName_name, ExchangeName_value)
	proto.RegisterEnum("evarmor.FetchStatus", FetchStatus_name, FetchStatus_value)
	proto.RegisterEnum("evarmor.ReportMethod", ReportMethod_name, ReportMethod_value)
}

func init() { proto.RegisterFile("evarmor/common.proto", FileDescriptorEvarmorCommon) }

var FileDescriptorEvarmorCommon = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x04, 0x03, 0x02, 0x01, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x4e, 0x02, 0x31,
	0x14, 0x85, 0xed, 0xf0, 0x17, 0x2e, 0x2c, 0x4a, 0x05, 0x1d, 0x77, 0x84, 0x15, 0x61, 0xa1, 0x0b,
	0xf5, 0x05, 0xfc, 0x21, 0x6c, 0x70, 0x31, 0x60, 0x48, 0xd8, 0x95, 0xe1, 0x66, 0xda, 0x30, 0x73,
	0x3b, 0xe9, 0x14, 0xf5, 0x85, 0x7c, 0x4f, 0x53, 0x02, 0xa1, 0xb2, 0x3b, 0xe7, 0x3b, 0x3d, 0xb7,
	0xb7, 0x29, 0xf4, 0xf1, 0x4b, 0xda, 0xc2, 0xd8, 0x87, 0xd4, 0x14, 0x85, 0xa1, 0xfb, 0xd2, 0x1a,
	0x67, 0x44, 0xeb, 0x48, 0x47, 0x4f, 0xd0, 0x4c, 0xb0, 0xda, 0xe7, 0x4e, 0xc4, 0xd0, 0x42, 0x6b,
	0x5f, 0xcd, 0x16, 0x63, 0x36, 0x64, 0xe3, 0x46, 0x72, 0xb2, 0x82, 0x43, 0xad, 0xa8, 0xb2, 0x38,
	0x1a, 0xb2, 0x71, 0x3b, 0xf1, 0x72, 0xf4, 0x0c, 0x9d, 0x0f, 0x59, 0xe0, 0x5c, 0x96, 0xa5, 0xa6,
	0x4c, 0x08, 0xa8, 0xa7, 0xa7, 0x5e, 0x3b, 0x39, 0x68, 0xcf, 0x48, 0x16, 0x78, 0x6c, 0x1d, 0xf4,
	0xe4, 0x97, 0x41, 0xf7, 0xfd, 0x27, 0x55, 0x92, 0x32, 0xf4, 0x7d, 0x71, 0x0b, 0xd7, 0xa1, 0xff,
	0xa4, 0x1d, 0x99, 0x6f, 0xe2, 0x57, 0xe2, 0x0e, 0x06, 0x61, 0xb0, 0x56, 0x48, 0xd9, 0x5a, 0x99,
	0x3d, 0x67, 0xe2, 0x06, 0x44, 0x18, 0xbd, 0xc9, 0x5c, 0x4b, 0xe2, 0x91, 0x88, 0xa1, 0x1f, 0xf2,
	0x85, 0x57, 0x33, 0xa9, 0x79, 0xed, 0x72, 0xd8, 0x8b, 0xce, 0xf3, 0x8d, 0x91, 0x76, 0xcb, 0xeb,
	0xa2, 0x0f, 0x3c, 0x8c, 0x66, 0x9a, 0x1c, 0x6f, 0x4c, 0x96, 0xd0, 0x99, 0xa2, 0x4b, 0xd5, 0xc2,
	0x49, 0xb7, 0xaf, 0xfc, 0x8d, 0x81, 0x3d, 0x2f, 0xf9, 0x9f, 0xaf, 0xa4, 0x76, 0x9a, 0x32, 0xce,
	0xc4, 0x00, 0x7a, 0x01, 0x9f, 0x6a, 0xd2, 0x95, 0xe2, 0xd1, 0x64, 0x07, 0xdd, 0x04, 0x4b, 0x63,
	0xdd, 0x1c, 0x9d, 0x32, 0x5b, 0xff, 0xf8, 0xd0, 0x9f, 0xe7, 0x0e, 0xa0, 0x17, 0x06, 0x4b, 0x65,
	0x11, 0x39, 0xf3, 0xbb, 0x86, 0x78, 0x85, 0xb8, 0xe3, 0xd1, 0xe5, 0xe1, 0xb9, 0x21, 0xa7, 0x78,
	0x6d, 0xd3, 0x3c, 0xfc, 0xf3, 0xe3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xdc, 0xd8, 0x55,
	0xff, 0x01, 0x00, 0x00,
}
