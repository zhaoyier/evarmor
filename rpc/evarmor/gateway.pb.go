// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evarmor/gateway.proto

package evarmor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "strings"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = strings.TrimPrefix

type _ServiceTypeEnum struct {
	Unknown   ServiceType
	Gateway   ServiceType
	TotalSize int
	List      []ServiceType
	ZeroList  []ServiceType
}

var ServiceTypeEnum = _ServiceTypeEnum{
	0,
	1,
	2,
	[]ServiceType{
		ServiceType_ServiceTypeGateway,
	},
	[]ServiceType{
		ServiceType_ServiceTypeUnknown,
		ServiceType_ServiceTypeGateway,
	},
}

func (x *_ServiceTypeEnum) Parse(short string) ServiceType {
	return ServiceType(ServiceType_value["ServiceType"+strings.TrimPrefix(short, "ServiceType")])
}

func (x ServiceType) IsUnknown() bool {
	return x == ServiceTypeEnum.Unknown
}

func (x ServiceType) BitHasUnknown() bool {
	return x.BitHas(ServiceTypeEnum.Unknown)
}

func (x ServiceType) BitOrUnknown() ServiceType {
	x.BitOr(ServiceTypeEnum.Unknown)
	return x
}

func (x ServiceType) GetUnknown() ServiceType {
	return ServiceTypeEnum.Unknown
}

func (x ServiceType) IsGateway() bool {
	return x == ServiceTypeEnum.Gateway
}

func (x ServiceType) BitHasGateway() bool {
	return x.BitHas(ServiceTypeEnum.Gateway)
}

func (x ServiceType) BitOrGateway() ServiceType {
	x.BitOr(ServiceTypeEnum.Gateway)
	return x
}

func (x ServiceType) GetGateway() ServiceType {
	return ServiceTypeEnum.Gateway
}

func (x ServiceType) Valid() bool {
	if x == ServiceType_ServiceTypeUnknown {
		return false
	}
	return x.ZeroValid()
}

func (x ServiceType) ZeroValid() bool {
	_, ok := ServiceType_name[int32(x)]
	return ok
}
func (x ServiceType) Short() string {
	n := x.String()
	typ := "ServiceType"
	if len(n) > len(typ) {
		if n[:len(typ)] == typ {
			return n[len(typ):]
		}
	}
	return n

}
func (x ServiceType) BitString() []string {
	name := make([]string, 0, len(ServiceTypeEnum.List))
	for _, item := range ServiceTypeEnum.List {
		if x.BitHas(item) {
			name = append(name, item.Short())
		}
	}
	return name

}

func (x ServiceType) BitValid() bool {
	return x.BitHas(ServiceTypeEnum.List...)
}
func (x *ServiceType) BitOr(item ServiceType) {
	*x |= item
}
func (x ServiceType) BitHas(xs ...ServiceType) bool {
	for _, item := range xs {
		if x&item > 0 {
			return true
		}
	}
	return false
}

func (x *ServiceType) SetValue(v int32) {
	*x = ServiceType(v)
}

func (x ServiceType) GetValue() int32 {
	return int32(x)
}

func (x *ServiceType) Type() string {
	return "ServiceType"
}

type ServiceType int32

const (
	ServiceType_ServiceTypeUnknown ServiceType = 0
	ServiceType_ServiceTypeGateway ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "ServiceTypeUnknown",
	1: "ServiceTypeGateway",
}
var ServiceType_value = map[string]int32{
	"ServiceTypeUnknown": 0,
	"ServiceTypeGateway": 1,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}
func (ServiceType) EnumDescriptor() ([]byte, []int) { return FileDescriptorEvarmorGateway, []int{0} }

type _ServiceLevelEnum struct {
	Unknown   ServiceLevel
	Client    ServiceLevel
	TotalSize int
	List      []ServiceLevel
	ZeroList  []ServiceLevel
}

var ServiceLevelEnum = _ServiceLevelEnum{
	0,
	1,
	2,
	[]ServiceLevel{
		ServiceLevel_ServiceLevelClient,
	},
	[]ServiceLevel{
		ServiceLevel_ServiceLevelUnknown,
		ServiceLevel_ServiceLevelClient,
	},
}

func (x *_ServiceLevelEnum) Parse(short string) ServiceLevel {
	return ServiceLevel(ServiceLevel_value["ServiceLevel"+strings.TrimPrefix(short, "ServiceLevel")])
}

func (x ServiceLevel) IsUnknown() bool {
	return x == ServiceLevelEnum.Unknown
}

func (x ServiceLevel) BitHasUnknown() bool {
	return x.BitHas(ServiceLevelEnum.Unknown)
}

func (x ServiceLevel) BitOrUnknown() ServiceLevel {
	x.BitOr(ServiceLevelEnum.Unknown)
	return x
}

func (x ServiceLevel) GetUnknown() ServiceLevel {
	return ServiceLevelEnum.Unknown
}

func (x ServiceLevel) IsClient() bool {
	return x == ServiceLevelEnum.Client
}

func (x ServiceLevel) BitHasClient() bool {
	return x.BitHas(ServiceLevelEnum.Client)
}

func (x ServiceLevel) BitOrClient() ServiceLevel {
	x.BitOr(ServiceLevelEnum.Client)
	return x
}

func (x ServiceLevel) GetClient() ServiceLevel {
	return ServiceLevelEnum.Client
}

func (x ServiceLevel) Valid() bool {
	if x == ServiceLevel_ServiceLevelUnknown {
		return false
	}
	return x.ZeroValid()
}

func (x ServiceLevel) ZeroValid() bool {
	_, ok := ServiceLevel_name[int32(x)]
	return ok
}
func (x ServiceLevel) Short() string {
	n := x.String()
	typ := "ServiceLevel"
	if len(n) > len(typ) {
		if n[:len(typ)] == typ {
			return n[len(typ):]
		}
	}
	return n

}
func (x ServiceLevel) BitString() []string {
	name := make([]string, 0, len(ServiceLevelEnum.List))
	for _, item := range ServiceLevelEnum.List {
		if x.BitHas(item) {
			name = append(name, item.Short())
		}
	}
	return name

}

func (x ServiceLevel) BitValid() bool {
	return x.BitHas(ServiceLevelEnum.List...)
}
func (x *ServiceLevel) BitOr(item ServiceLevel) {
	*x |= item
}
func (x ServiceLevel) BitHas(xs ...ServiceLevel) bool {
	for _, item := range xs {
		if x&item > 0 {
			return true
		}
	}
	return false
}

func (x *ServiceLevel) SetValue(v int32) {
	*x = ServiceLevel(v)
}

func (x ServiceLevel) GetValue() int32 {
	return int32(x)
}

func (x *ServiceLevel) Type() string {
	return "ServiceLevel"
}

type ServiceLevel int32

const (
	ServiceLevel_ServiceLevelUnknown ServiceLevel = 0
	ServiceLevel_ServiceLevelClient  ServiceLevel = 1
)

var ServiceLevel_name = map[int32]string{
	0: "ServiceLevelUnknown",
	1: "ServiceLevelClient",
}
var ServiceLevel_value = map[string]int32{
	"ServiceLevelUnknown": 0,
	"ServiceLevelClient":  1,
}

func (x ServiceLevel) String() string {
	return proto.EnumName(ServiceLevel_name, int32(x))
}
func (ServiceLevel) EnumDescriptor() ([]byte, []int) { return FileDescriptorEvarmorGateway, []int{1} }

func init() {
	proto.RegisterEnum("evarmor.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("evarmor.ServiceLevel", ServiceLevel_name, ServiceLevel_value)
}

func init() { proto.RegisterFile("evarmor/gateway.proto", FileDescriptorEvarmorGateway) }

var FileDescriptorEvarmorGateway = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x04, 0x03, 0x02, 0x01, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x2d, 0x4b, 0x2c,
	0xca, 0xcd, 0x2f, 0xd2, 0x4f, 0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x87, 0x0a, 0x6b, 0xd9, 0x72, 0x71, 0x07, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7,
	0x86, 0x54, 0x16, 0xa4, 0x0a, 0x89, 0x71, 0x09, 0x21, 0x71, 0x43, 0xf3, 0xb2, 0xf3, 0xf2, 0xcb,
	0xf3, 0x04, 0x18, 0xd0, 0xc4, 0xdd, 0x21, 0x66, 0x09, 0x30, 0x6a, 0xd9, 0x73, 0xf1, 0x40, 0xc5,
	0x7d, 0x52, 0xcb, 0x52, 0x73, 0x84, 0xc4, 0xb9, 0x84, 0x91, 0xf9, 0xd8, 0x0c, 0x00, 0x4b, 0x38,
	0xe7, 0x64, 0xa6, 0xe6, 0x95, 0x08, 0x30, 0x26, 0xb1, 0x81, 0xdd, 0x63, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xb0, 0x10, 0xf0, 0x7c, 0xa8, 0x00, 0x00, 0x00,
}
