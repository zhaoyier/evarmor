// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evarmor/common.proto

package network

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = strings.TrimPrefix

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type _XMessageSourceEnum struct {
	Unknown   XMessageSource
	Proxy     XMessageSource
	Chat      XMessageSource
	TotalSize int
	List      []XMessageSource
	ZeroList  []XMessageSource
}

var XMessageSourceEnum = _XMessageSourceEnum{
	0,
	1,
	2,
	3,
	[]XMessageSource{
		XMessageSource_XMessageSourceProxy,
		XMessageSource_XMessageSourceChat,
	},
	[]XMessageSource{
		XMessageSource_XMessageSourceUnknown,
		XMessageSource_XMessageSourceProxy,
		XMessageSource_XMessageSourceChat,
	},
}

func (x *_XMessageSourceEnum) Parse(short string) XMessageSource {
	return XMessageSource(XMessageSource_value["XMessageSource"+strings.TrimPrefix(short, "XMessageSource")])
}

func (x XMessageSource) IsUnknown() bool {
	return x == XMessageSourceEnum.Unknown
}

func (x XMessageSource) BitHasUnknown() bool {
	return x.BitHas(XMessageSourceEnum.Unknown)
}

func (x XMessageSource) BitOrUnknown() XMessageSource {
	x.BitOr(XMessageSourceEnum.Unknown)
	return x
}

func (x XMessageSource) GetUnknown() XMessageSource {
	return XMessageSourceEnum.Unknown
}

func (x XMessageSource) IsProxy() bool {
	return x == XMessageSourceEnum.Proxy
}

func (x XMessageSource) BitHasProxy() bool {
	return x.BitHas(XMessageSourceEnum.Proxy)
}

func (x XMessageSource) BitOrProxy() XMessageSource {
	x.BitOr(XMessageSourceEnum.Proxy)
	return x
}

func (x XMessageSource) GetProxy() XMessageSource {
	return XMessageSourceEnum.Proxy
}

func (x XMessageSource) IsChat() bool {
	return x == XMessageSourceEnum.Chat
}

func (x XMessageSource) BitHasChat() bool {
	return x.BitHas(XMessageSourceEnum.Chat)
}

func (x XMessageSource) BitOrChat() XMessageSource {
	x.BitOr(XMessageSourceEnum.Chat)
	return x
}

func (x XMessageSource) GetChat() XMessageSource {
	return XMessageSourceEnum.Chat
}

func (x XMessageSource) Valid() bool {
	if x == XMessageSource_XMessageSourceUnknown {
		return false
	}
	return x.ZeroValid()
}

func (x XMessageSource) ZeroValid() bool {
	_, ok := XMessageSource_name[int32(x)]
	return ok
}
func (x XMessageSource) Short() string {
	n := x.String()
	typ := "XMessageSource"
	if len(n) > len(typ) {
		if n[:len(typ)] == typ {
			return n[len(typ):]
		}
	}
	return n

}
func (x XMessageSource) BitString() []string {
	name := make([]string, 0, len(XMessageSourceEnum.List))
	for _, item := range XMessageSourceEnum.List {
		if x.BitHas(item) {
			name = append(name, item.Short())
		}
	}
	return name

}

func (x XMessageSource) BitValid() bool {
	return x.BitHas(XMessageSourceEnum.List...)
}
func (x *XMessageSource) BitOr(item XMessageSource) {
	*x |= item
}
func (x XMessageSource) BitHas(xs ...XMessageSource) bool {
	for _, item := range xs {
		if x&item > 0 {
			return true
		}
	}
	return false
}

func (x *XMessageSource) SetValue(v int32) {
	*x = XMessageSource(v)
}

func (x XMessageSource) GetValue() int32 {
	return int32(x)
}

func (x *XMessageSource) Type() string {
	return "XMessageSource"
}

type XMessageSource int32

const (
	XMessageSource_XMessageSourceUnknown XMessageSource = 0
	XMessageSource_XMessageSourceProxy   XMessageSource = 1
	XMessageSource_XMessageSourceChat    XMessageSource = 2
)

var XMessageSource_name = map[int32]string{
	0: "XMessageSourceUnknown",
	1: "XMessageSourceProxy",
	2: "XMessageSourceChat",
}

var XMessageSource_value = map[string]int32{
	"XMessageSourceUnknown": 0,
	"XMessageSourceProxy":   1,
	"XMessageSourceChat":    2,
}

func (x XMessageSource) String() string {
	return proto.EnumName(XMessageSource_name, int32(x))
}

func (XMessageSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c7ce74c29c06c17c, []int{0}
}

type XMessage struct {
	//
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	//
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	//
	Source XMessageSource `protobuf:"varint,3,opt,name=source,proto3,enum=evarmor.XMessageSource" json:"source"`
}

func (m *XMessage) Validate() error {
	return nil
}

func (m *XMessage) Reset()         { *m = XMessage{} }
func (m *XMessage) String() string { return proto.CompactTextString(m) }
func (*XMessage) ProtoMessage()    {}
func (*XMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7ce74c29c06c17c, []int{0}
}

func (m *XMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XMessage.Unmarshal(m, b)
}
func (m *XMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XMessage.Marshal(b, m, deterministic)
}
func (m *XMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XMessage.Merge(m, src)
}
func (m *XMessage) XXX_Size() int {
	return xxx_messageInfo_XMessage.Size(m)
}
func (m *XMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_XMessage.DiscardUnknown(m)
}

var xxx_messageInfo_XMessage proto.InternalMessageInfo

func (m *XMessage) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *XMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *XMessage) GetSource() XMessageSource {
	if m != nil {
		return m.Source
	}
	return XMessageSource_XMessageSourceUnknown
}

func init() {
	proto.RegisterEnum("evarmor.XMessageSource", XMessageSource_name, XMessageSource_value)
	proto.RegisterType((*XMessage)(nil), "evarmor.XMessage")
}

func init() { proto.RegisterFile("evarmor/common.proto", fileDescriptor_c7ce74c29c06c17c) }

var fileDescriptor_c7ce74c29c06c17c = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x04, 0x03, 0x02, 0x01, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x2d, 0x4b, 0x2c,
	0xca, 0xcd, 0x2f, 0xd2, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0x8a, 0x2a, 0x25, 0x73, 0x71, 0x44, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7,
	0x0a, 0x09, 0x71, 0xb1, 0x24, 0xe7, 0xa7, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81,
	0xd9, 0x20, 0xb1, 0x94, 0xc4, 0x92, 0x44, 0x09, 0x26, 0x88, 0x18, 0x88, 0x2d, 0xa4, 0xcf, 0xc5,
	0x56, 0x9c, 0x5f, 0x5a, 0x94, 0x9c, 0x2a, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xae, 0x07,
	0x35, 0x4d, 0x0f, 0x66, 0x54, 0x30, 0x58, 0x3a, 0x08, 0xaa, 0x4c, 0x2b, 0x86, 0x8b, 0x0f, 0x55,
	0x46, 0x48, 0x92, 0x4b, 0x14, 0x55, 0x24, 0x34, 0x2f, 0x3b, 0x2f, 0xbf, 0x3c, 0x4f, 0x80, 0x41,
	0x48, 0x9c, 0x4b, 0x18, 0x55, 0x2a, 0xa0, 0x28, 0xbf, 0xa2, 0x52, 0x80, 0x51, 0x48, 0x8c, 0x4b,
	0x08, 0x55, 0xc2, 0x39, 0x23, 0xb1, 0x44, 0x80, 0x29, 0x89, 0x0d, 0xec, 0x25, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xcb, 0xa5, 0xff, 0xea, 0x00, 0x00, 0x00,
}
